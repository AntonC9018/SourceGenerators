name: .NET

# This workflow should trigger in the following cases:
#   - The commit is any push in any branch in the repo
#   - The commit is a published PR from anyone else
#
# This setup is done to avoid duplicate runs for the same exact commits, for cases when
# the PR is done from a branch in this repo, which would already trigger the "push"
# condition. This way, only PRs from forks will actually trigger the workflow.
#
# Because we can't really check these conditions from the global triggers here, they are
# added to the two root jobs below instead. If canceled, the whole workflow will stop.
on: [push, pull_request]

env:
  EXCLUDE_RUN_ID_FROM_PACKAGE: false
  EXCLUDE_SUFFIX_FROM_VERSION: false

jobs:

  build-solution:
    if: >-
      github.event_name == 'push' ||
      github.event.pull_request.user.login != github.repository_owner
    strategy:
      matrix:
        configuration: [Debug, Release]
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v4
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
    - name: Build
      run: dotnet restore sln.sln --configuration=${{matrix.configuration}} -bl
    - name: Upload MSBuild binary log
      uses: actions/upload-artifact@v4
      with:
        name: msbuild_log_${{matrix.configuration}}
        path: msbuild.binlog
        if-no-files-found: error

  # Pack all projects with dotnet/MSBuild to generate NuGet packages.
  # This workflow also uploads the resulting packages as artifacts.
  build-packages:
    if: >-
      github.event_name == 'push' ||
      github.event.pull_request.user.login != github.repository_owner
    runs-on: ubuntu-latest
    steps:
    - name: Git checkout
      uses: actions/checkout@v4
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
    - name: Build Utils.Shared
      run: dotnet pack source\Utils.Shared\Utils.Shared.csproj -c Release
    - name: Build PropertyCacheHelper.Shared
      run: dotnet pack source\PropertyCacheHelper.Shared\PropertyCacheHelper.Shared.csproj -c Release
    - name: Build PropertyCacheHelper.SourceGenerator
      run: dotnet pack source\PropertyCacheHelper.SourceGenerator\PropertyCacheHelper.SourceGenerator.csproj -c Release

      # Upload the packages to the pipeline artifacts
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget_packages
        path: artifacts\*.nupkg
        if-no-files-found: error

  # Publish the packages to GitHub packages
  publish-nightlies-github:
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'push'}}
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: nuget_packages
        path: artifacts
    - run: dotnet nuget push "artifacts\*.nupkg" --source "https://nuget.pkg.github.com/${{github.repository_owner}}/index.json" --api-key ${{secrets.GITHUB_TOKEN}} --skip-duplicate
